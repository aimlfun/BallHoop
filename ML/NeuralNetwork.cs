//#define USE_TANH
#define USE_SELU

using Newtonsoft.Json;
using System.Text;

namespace ML;

/// <summary>
///    _   _                      _   _   _      _                      _    
///   | \ | | ___ _   _ _ __ __ _| | | \ | | ___| |___      _____  _ __| | __
///   |  \| |/ _ \ | | | '__/ _` | | |  \| |/ _ \ __\ \ /\ / / _ \| '__| |/ /
///   | |\  |  __/ |_| | | | (_| | | | |\  |  __/ |_ \ V  V / (_) | |  |   < 
///   |_| \_|\___|\__,_|_|  \__,_|_| |_| \_|\___|\__| \_/\_/ \___/|_|  |_|\_\
///
/// Implementation of a feedforward neural network.
/// </summary>
public class NeuralNetwork
{
    /// <summary>
    /// Record the best score so far, so we can save the neural network when we get a better score.
    /// </summary>
    private double _bestSoFar = -1;

    /// <summary>
    /// Used to normalise the force.
    /// </summary>
    public const double c_forceNormaliser = 65f / 2;

    /// <summary>
    /// Used to normalise the distance.
    /// </summary>
    public const double c_distNormaliser = 46f / 2;

    /// <summary>
    /// Used to normalise the angle.
    /// </summary>
    public const double c_angleNormaliser = 1.3f / 2;

    /// <summary>
    /// Default layers for the neural network.
    /// </summary>
    public static readonly int[] c_defaultLayers = [2, 8, 8, 8, 1]; // [2, 10, 7, 3, 1];

    /// <summary>
    /// Default filename for saving and loading the neural network. (const, but you can't reference the layers, so static used).
    /// </summary>
    public static string c_aiModelFilePath = $@"c:\temp\model-{string.Join("-", c_defaultLayers)}.json";

    /// <summary>
    /// Where the training data is stored. This is a CSV file with the following columns: Force, Angle, XPos, Distance, Score.
    /// It's generated by the BallHoop UI.
    /// </summary>
    public const string c_trainingFileName = @"c:\temp\basketball-training-data.csv";

    /// <summary>
    /// Initialisation type (how to initialise the weights and biases).
    /// </summary>
    public enum InitType { Random, Xavier, Gaussian };

    /// <summary>
    /// Epoch counter.
    /// </summary>
    private static Int64 _epoch = 0;

    /// <summary>
    /// Expose the current epoch.
    /// </summary>
    public static Int64 Epoch => _epoch;

    /// <summary>
    /// Indicates whether to use the Adam optimizer.
    /// </summary>
    private readonly bool _adamOptimiser;

    /// <summary>
    /// The maximum gradient allowed, to prevent the network from blowing up.
    /// </summary>
    private const double c_maxGradient = 1500;

    /// <summary>
    /// SELU alpha.
    /// </summary>
    private const double c_SeLUalpha = 1.6732F;

    /// <summary>
    /// SELU lambda.
    /// </summary>
    private const double c_SeLUlambda = 1.0507F;

    /// <summary>
    /// How many layers of neurons (2+). Do not do 1.
    /// </summary>
    internal readonly int[] Layers;

    /// <summary>
    /// The neurons.
    /// [layer][neuron]
    /// </summary>
    internal double[][] Neurons;

    /// <summary>
    /// NN Biases. Either improves or lowers the chance of this neuron fully firing.
    /// [layer][neuron]
    /// </summary>
    internal double[][] Biases;

    /// <summary>
    /// NN weights. Reduces or amplifies the output for the relationship between neurons in each layer
    /// [layer][neuron][neuron]
    /// </summary>
    internal double[][][] Weights;

    #region BACK PROPAGATION
    /// <summary>
    /// Controls the speed of back-propagation (too large: oscillation will occur, too small: takes forever to train).
    /// </summary>
    public static double LearningRate { get; set; } = 0.01F;
    #endregion

    #region "Adam Optimizer" variables and constants
    /// <summary>
    /// Parameters for the Adam optimizer.
    /// </summary>
    private const double c_beta1 = 0.9F;
    private const double c_beta2 = 0.999F;
    private const double c_epsilon = 1e-8F;

    internal double[][][] _m;
    internal double[][][] _v;
    internal double[][] _mBias;
    internal double[][] _vBias;

    internal int _t = 0;
    #endregion

    /// <summary>
    /// The neural network.
    /// </summary>
    public static readonly NeuralNetwork s_neuralNetwork = new(NeuralNetwork.c_defaultLayers, InitType.Xavier, true);

    /// <summary>
    /// Constructor.
    /// </summary>
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Init*() set the fields.
    public NeuralNetwork(int[] layerDefinition, InitType initType, bool useAdam)
#pragma warning restore CS8618
    {
        // (1) INPUT (2) HIDDEN (3) OUTPUT.
        if (layerDefinition.Length < 2) throw new ArgumentException(nameof(layerDefinition) + " insufficient layers.");

        // copy layerDefinition to Layers.     
        Layers = new int[layerDefinition.Length];

        for (int layer = 0; layer < layerDefinition.Length; layer++)
        {
            Layers[layer] = layerDefinition[layer];
        }

        BiasWeightingCache.SameWeightsBiases(layerDefinition, initType);

        _adamOptimiser = useAdam;

        InitialiseNeurons();
        InitialiseBiases(initType);
        InitialiseWeights(initType);

        if (_adamOptimiser) InitialiseAdam();
    }

#if USE_TANH
    /// <summary>
    /// Activation function.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private static double ActivationFunction(double value)
    {
        // change to TANH
        return Math.Tanh(value);
    }

    /// <summary>
    /// Returns the code for the activation function.
    /// </summary>
    private static string ActivationFunctionCode => "Math.Tanh(value)";

    /// Derivative of the activation function.
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    private static double DerivativeOfActivationFunction(double input)
    {
        double tanh = Math.Tanh(input);
        return (1 - tanh * tanh);
    }
#endif

#if USE_SELU
    /// <summary>
    /// Activation function.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private static double ActivationFunction(double value)
    {
        return value > 0 ? c_SeLUlambda * value : c_SeLUlambda * c_SeLUalpha * (Math.Exp(value) - 1);
    }

    /// <summary>
    /// Returns the code for the activation function.
    /// </summary>
    private static string ActivationFunctionCode => $"value > 0 ? {c_SeLUlambda} * value : {c_SeLUlambda} * {c_SeLUalpha} * (Math.Exp(value) - 1)";

    /// <summary>
    /// Derivative of the activation function.
    /// </summary>
    /// <param name="input"></param>
    /// <returns></returns>
    private static double DerivativeOfActivationFunction(double input)
    {
        return input > 0 ? c_SeLUlambda : c_SeLUlambda * c_SeLUalpha * Math.Exp(input);
    }
#endif

    /// <summary>
    /// Create empty storage array for the neurons in the network.
    /// </summary>
    private void InitialiseNeurons()
    {
        List<double[]> neuronsList = [];

        for (int layer = 0; layer < Layers.Length; layer++)
        {
            neuronsList.Add(new double[Layers[layer]]);
        }

        Neurons = [.. neuronsList];
    }

    /// <summary>
    /// initializes and populates biases.
    /// </summary>
    private void InitialiseBiases(InitType initType)
    {
        Biases = BiasWeightingCache.GetBiases(initType, Layers);
    }

    /// <summary>
    /// initializes random array for the weights being held in the network.
    /// </summary>
    private void InitialiseWeights(InitType initType)
    {
        Weights = BiasWeightingCache.GetWeights(initType, Layers);
    }

    /// <summary>
    /// Normalise the input values.
    /// </summary>
    /// <param name="force"></param>
    /// <param name="angleInDegrees"></param>
    /// <param name="dist"></param>
    /// <returns></returns>
    public static (double, double, double) Normalise(double force, double angleInDegrees, double dist)
    {
        // force 1..300 > force -= 150 > /= 150.
        // force=0   > force = -150 > force = -1 <- no force
        // force=100 > force =  -50 > force = -0.333333
        // force=300 > force =  150 > force =  1 <- all force
        force -= c_forceNormaliser;
        dist -= c_distNormaliser;
        angleInDegrees -= 45; // 0..90 halfway is 45

        // we want ALL to be between -1..+1
        double forceScaled = force / c_forceNormaliser; // scale, so it is <=1
        double angleRadiansScaled = (angleInDegrees * Math.PI / 180f) / c_angleNormaliser;
        double distScaled = dist / c_distNormaliser;

        return (forceScaled, angleRadiansScaled, distScaled);
    }

    /// <summary>
    /// Un-normalise the angle.
    /// </summary>
    /// <param name="scaledAngle"></param>
    /// <returns></returns>
    public static double AngleUnscaled(double scaledAngle)
    {
        scaledAngle *= c_angleNormaliser;
        scaledAngle *= 180 / Math.PI;
        scaledAngle += 45;

        return scaledAngle;
    }

    /// <summary>
    /// Un-normalise the distance.
    /// </summary>
    /// <param name="scaledDist"></param>
    /// <returns></returns>
    public static double DistanceUnscaled(double scaledDist)
    {
        scaledDist *= c_distNormaliser;
        scaledDist += c_distNormaliser;

        return scaledDist;
    }

    /// <summary>
    /// Un-normalise the force.
    /// </summary>
    /// <param name="scaledForce"></param>
    /// <returns></returns>
    public static double ForceUnscaled(double scaledForce)
    {
        scaledForce *= c_forceNormaliser;
        scaledForce += c_forceNormaliser;

        return scaledForce;
    }

    /// <summary>
    /// Feed forward, inputs >==> outputs.
    /// </summary>
    /// <param name="inputs"></param>
    /// <returns></returns>
    public double[] FeedForward(double[] inputs)
    {
        // put the INPUT values into layer 0 neurons
        for (int i = 0; i < inputs.Length; i++)
        {
            Neurons[0][i] = inputs[i];
        }

        // we start on layer 1 as we are computing values from prior layers (layer 0 is inputs)

        for (int layer = 1; layer < Layers.Length; layer++)
        {
            for (int neuronIndexForLayer = 0; neuronIndexForLayer < Layers[layer]; neuronIndexForLayer++)
            {
                // sum of outputs from the previous layer
                double value = 0;

                for (int neuronIndexInPreviousLayer = 0; neuronIndexInPreviousLayer < Layers[layer - 1]; neuronIndexInPreviousLayer++)
                {
                    value += Weights[layer - 1][neuronIndexForLayer][neuronIndexInPreviousLayer] * Neurons[layer - 1][neuronIndexInPreviousLayer];
                }

                Neurons[layer][neuronIndexForLayer] = ActivationFunction(value + Biases[layer - 1][neuronIndexForLayer]);
            }
        }

        return Neurons[^1]; // final* layer contains OUTPUT
    }

    /// <summary>
    /// Initialise Adam optimizer.
    /// </summary>
    public void InitialiseAdam()
    {
        _t = 0;
        _m = new double[Weights.Length][][];
        _v = new double[Weights.Length][][];
        _mBias = new double[Biases.Length][];
        _vBias = new double[Biases.Length][];

        for (int i = 0; i < Weights.Length; i++)
        {
            _m[i] = new double[Weights[i].Length][];
            _v[i] = new double[Weights[i].Length][];

            for (int j = 0; j < Weights[i].Length; j++)
            {
                _m[i][j] = new double[Weights[i][j].Length];
                _v[i][j] = new double[Weights[i][j].Length];
            }
        }

        for (int i = 0; i < Biases.Length; i++)
        {
            _mBias[i] = new double[Biases[i].Length];
            _vBias[i] = new double[Biases[i].Length];
        }
    }

    /// <summary>
    /// Increment the epoch.
    /// </summary>
    public static void IncrementEpoch()
    {
        _epoch++;
    }

    /// <summary>
    /// Reset the epoch.
    /// </summary>
    public static void Reset()
    {
        _epoch = 0;
        s_neuralNetwork.InitialiseAdam();
        LearningRate = 0.01f;
    }

    /// <summary>
    /// Back propagate training.
    /// </summary>
    /// <param name="inputs"></param>
    /// <param name="expected"></param>
    public void BackPropagate(double[] inputs, double[] expected)
    {
        if (_adamOptimiser)
        {
            BackPropagateAdam(inputs, expected);
        }
        else
        {
            BackPropagateNoOptimiser(inputs, expected);
        }
    }

    /// <summary>
    /// Back propagate training, without using the Adam optimizer.
    /// </summary>
    /// <param name="inputs"></param>
    /// <param name="expected"></param>
    public void BackPropagateNoOptimiser(double[] inputs, double[] expected)
    {
        double[] output = FeedForward(inputs);

        List<double[]> gammaList = [];

        for (int i = 0; i < Layers.Length; i++)
        {
            gammaList.Add(new double[Layers[i]]);
        }

        double[][] gamma = [.. gammaList];

        int layersMinus2 = Layers.Length - 2;
        int layersMinus1 = Layers.Length - 1;

        for (int i = 0; i < output.Length; i++)
        {
            // for each output, workout the error scaled by the derivative of the activation function.
            // The "error" is fairly obvious: I expected 1, I got 0.8, I need to increase the output by 0.2.
            // The derivative of the activation function is less obvious, it's the rate of change of the activation function. That in itself
            // makes it no easier to understand. What we're doing is scaling the error based on how much 1 unit from upstream would have affected
            // the output. 

            double error = output[i] - expected[i];
            gamma[layersMinus1][i] = ClampGradient(error) * DerivativeOfActivationFunction(output[i]);
        }

        for (int i = 0; i < Layers[^1]; i++)
        {
            Biases[layersMinus2][i] -= gamma[layersMinus1][i] * LearningRate;

            for (int j = 0; j < Layers[^2]; j++)
            {
                Weights[layersMinus2][i][j] -= gamma[layersMinus1][i] * Neurons[layersMinus2][j] * LearningRate;
            }
        }

        for (int i = Layers.Length - 2; i > 0; i--)
        {
            int layer = i - 1;
            int layerPlus1 = i + 1;

            for (int j = 0; j < Layers[i]; j++)
            {
                for (int k = 0; k < gamma[layerPlus1].Length; k++)
                {
                    gamma[i][j] += ClampGradient(gamma[layerPlus1][k] * Weights[i][k][j]);
                }

                gamma[i][j] *= ClampGradient(DerivativeOfActivationFunction(Neurons[i][j]));

                Biases[layer][j] -= gamma[i][j] * LearningRate; // modify biases of network

                for (int k = 0; k < Layers[layer]; k++)
                {
                    Weights[layer][j][k] -= gamma[i][j] * Neurons[layer][k] * LearningRate; // modify weights of network
                }
            }
        }
    }

    /// <summary>
    /// Back propagate training, using the Adam optimizer.
    /// </summary>
    /// <param name="inputs"></param>
    /// <param name="expected"></param>
    public void BackPropagateAdam(double[] inputs, double[] expected)
    {
        double[] output = FeedForward(inputs);

        List<double[]> gammaList = [];

        for (int i = 0; i < Layers.Length; i++)
        {
            gammaList.Add(new double[Layers[i]]);
        }

        double[][] gamma = [.. gammaList];

        int layersMinus2 = Layers.Length - 2;
        int layersMinus1 = Layers.Length - 1;

        for (int i = 0; i < output.Length; i++)
        {
            // for each output, workout the error scaled by the derivative of the activation function.
            // The "error" is fairly obvious: I expected 1, I got 0.8, I need to increase the output by 0.2.
            // The derivative of the activation function is less obvious, it's the rate of change of the activation function. That in itself
            // makes it no easier to understand. What we're doing is scaling the error based on how much 1 unit from upstream would have affected
            // the output. 

            double error = output[i] - expected[i];
            gamma[layersMinus1][i] = ClampGradient(error) * DerivativeOfActivationFunction(output[i]);
        }

        _t++;

        /*
            First Moment Estimate (m):
            •	m is an exponentially decaying average of past gradients used to smooth out the gradient updates, reducing the 
                variance and making the optimization process more stable.
        
            Second Moment Estimate (v):
            •	v is an exponentially decaying average of the squared gradients, helping to scale the learning rate for each 
                parameter individually, adapting the learning rate based on the magnitude of past gradients.
        */
        for (int i = 0; i < Layers[^1]; i++)
        {
            _mBias[layersMinus2][i] = c_beta1 * _mBias[layersMinus2][i] + (1 - c_beta1) * gamma[layersMinus1][i];
            _vBias[layersMinus2][i] = c_beta2 * _vBias[layersMinus2][i] + (1 - c_beta2) * gamma[layersMinus1][i] * gamma[layersMinus1][i];

            // mHatBias is the bias-corrected first moment estimate, ensuring that the gradient direction is accurate.
            // vHatBias is the bias-corrected second moment estimate, ensuring that the learning rate is appropriately scaled, preventing overly large or small updates.
            double mHatBias = _mBias[layersMinus2][i] / (1 - Math.Pow(c_beta1, _t));
            double vHatBias = _vBias[layersMinus2][i] / (1 - Math.Pow(c_beta2, _t));

            /*
                Bias Correction:
                •	When m and v are first initialized, they are biased towards zero, especially during the initial steps of training.
                •	To correct this bias, mHatBias and vHatBias are the bias-corrected versions of m and v, respectively. They adjust the 
                    estimates to account for the initial bias towards zero.

                By using mHatBias and vHatBias, the Adam optimizer combines the benefits of both momentum (smoothing out updates) and adaptive 
                learning rates (scaling updates based on gradient magnitudes), leading to more efficient and stable training.
            */
            Biases[layersMinus2][i] -= LearningRate * mHatBias / (Math.Sqrt((vHatBias + c_epsilon)));

            for (int j = 0; j < Layers[^2]; j++)
            {
                // adjust the weights based on the gradient and the learning rate.
                _m[layersMinus2][i][j] = c_beta1 * _m[layersMinus2][i][j] + (1 - c_beta1) * gamma[layersMinus1][i] * Neurons[layersMinus2][j];
                _v[layersMinus2][i][j] = c_beta2 * _v[layersMinus2][i][j] + (1 - c_beta2) * gamma[layersMinus1][i] * Neurons[layersMinus2][j] * gamma[layersMinus1][i] * Neurons[layersMinus2][j];

                double mHat = _m[layersMinus2][i][j] / (1 - Math.Pow(c_beta1, _t));
                double vHat = _v[layersMinus2][i][j] / (1 - Math.Pow(c_beta2, _t));

                Weights[layersMinus2][i][j] -= LearningRate * mHat / (Math.Sqrt(vHat) + c_epsilon);
            }
        }

        for (int i = Layers.Length - 2; i > 0; i--)
        {
            int layer = i - 1;
            int layerPlus1 = i + 1;

            for (int j = 0; j < Layers[i]; j++)
            {
                for (int k = 0; k < gamma[layerPlus1].Length; k++)
                {
                    gamma[i][j] += ClampGradient(gamma[layerPlus1][k] * Weights[i][k][j]);
                }

                gamma[i][j] *= ClampGradient(DerivativeOfActivationFunction(Neurons[i][j]));

                _mBias[layer][j] = c_beta1 * _mBias[layer][j] + (1 - c_beta1) * gamma[i][j];
                _vBias[layer][j] = c_beta2 * _vBias[layer][j] + (1 - c_beta2) * Math.Pow(gamma[i][j], 2);

                double mHatBias = _mBias[layer][j] / (1 - Math.Pow(c_beta1, _t));
                double vHatBias = _vBias[layer][j] / (1 - Math.Pow(c_beta2, _t));
                Biases[layer][j] -= LearningRate * mHatBias / (Math.Sqrt(vHatBias) + c_epsilon);

                for (int k = 0; k < Layers[layer]; k++)
                {
                    _m[layer][j][k] = c_beta1 * _m[layer][j][k] + (1 - c_beta1) * gamma[i][j] * Neurons[layer][k];
                    _v[layer][j][k] = c_beta2 * _v[layer][j][k] + (1 - c_beta2) * Math.Pow(gamma[i][j] * Neurons[layer][k], 2);

                    double mHat = _m[layer][j][k] / (1 - Math.Pow(c_beta1, _t));
                    double vHat = _v[layer][j][k] / (1 - Math.Pow(c_beta2, _t));

                    Weights[layer][j][k] -= LearningRate * mHat / (Math.Sqrt(vHat) + c_epsilon);
                }
            }
        }
    }

    /// <summary>
    /// To prevent the gradient becoming too large, we clamp it.
    /// SELU doesn't have a positive limit, so it's quite possible to blow up and get Infinity -> NaN.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private static double ClampGradient(double value)
    {
        // clip range
        if (value < -c_maxGradient) return -c_maxGradient;
        if (value > c_maxGradient) return c_maxGradient;

        return value;
    }

    /// <summary>
    /// Save the weights and biases to a file (i.e. the neural network).
    /// </summary>
    public void SaveWeightsAndBiases(double qualityPct)
    {
        string json = JsonConvert.SerializeObject((Weights, Biases, _m, _v, _mBias, _vBias, _t, qualityPct), Formatting.Indented);

        _bestSoFar = qualityPct;

        while (true)
        {
            try
            {
                File.WriteAllText(c_aiModelFilePath, json);
                break;
            }
            catch
            {
                Thread.Sleep(100); // file is in use, retry after 100ms
            }
        }
    }

    /// <summary>
    /// Record the quality of the model.
    /// </summary>
    public double CurrentModelQuality { get { return _bestSoFar; } }

    /// <summary>
    /// 
    /// </summary>
    public static bool HasTrainedModel
    {
        get
        {
            return File.Exists(c_aiModelFilePath);
        }
    }

    /// <summary>
    /// Load the weights and biases from a file (i.e. the neural network).
    /// </summary>
    public void LoadWeightsAndBiases()
    {
        if (!HasTrainedModel) return;

        string json;

        while (true)
        {
            try
            {
                json = File.ReadAllText(c_aiModelFilePath);
                break;
            }
            catch
            {
                Thread.Sleep(100); // file is in use, retry after 100ms
            }
        }

        (Weights, Biases, _m, _v, _mBias, _vBias, _t, _bestSoFar) = JsonConvert.DeserializeObject<(double[][][], double[][], double[][][], double[][][], double[][], double[][], int, double)>(json);
    }

    /// <summary>
    /// Returns the formula for the neural network.
    /// </summary>
    /// <returns></returns>
    public string Formula()
    {
        Dictionary<string, string> values = [];

        int neurons = 0;
        for (int layer = 0; layer < Layers.Length; layer++)
        {
            neurons += Neurons[layer].Length;
            if (neurons > 40) return "too big to output (exceed 40 neurons)";
        }

        values.Add($"0-0", $"angleInRadians");
        values.Add($"0-1", $"dist");

        // we start on layer 1 as we are computing values from prior layers (layer 0 is inputs)
        for (int layer = 1; layer < Layers.Length; layer++)
        {
            List<string> dictionaryEntriesWeShouldRemove = [];

            for (int neuronIndexForLayer = 0; neuronIndexForLayer < Layers[layer]; neuronIndexForLayer++)
            {
                // sum of outputs from the previous layer
                StringBuilder valueFormula = new(20);
                valueFormula.AppendLine("");

                for (int neuronIndexInPreviousLayer = 0; neuronIndexInPreviousLayer < Layers[layer - 1]; neuronIndexInPreviousLayer++)
                {
                    // remember: the "weight" amplifies or reduces, so we take the output of the prior neuron and "amplify/reduce" it's output here
                    string weight = Weights[layer - 1][neuronIndexForLayer][neuronIndexInPreviousLayer].ToString();

                    string key = $"{layer - 1}-{neuronIndexInPreviousLayer}";
                    string neuronvalue = values[key];

                    if (!dictionaryEntriesWeShouldRemove.Contains(key)) dictionaryEntriesWeShouldRemove.Add(key);

                    valueFormula.AppendLine($"{weight}*{neuronvalue}+");
                }

                valueFormula.AppendLine("");
                string value = valueFormula.ToString().Trim('+');

                values.Add($"{layer}-{neuronIndexForLayer}", $"Af({value}+{Biases[layer - 1][neuronIndexForLayer]})");
            }

            // reduce dictionary, as each iteration embeds the previous layer
            foreach (string key in dictionaryEntriesWeShouldRemove) values.Remove(key);
        }

        string logic = values[(Layers.Length - 1).ToString() + "-0"].Replace("\n", "");

        string result = $"\nprivate static double Af(double value) {{ return {ActivationFunctionCode}; }}\n" +
                        "\n" +
                        $"\npublic static double GetAIForce(double angleInRadians, double dist)\n" +
                        "{\n" +
                        $"  return {logic}*{c_forceNormaliser}+{c_forceNormaliser};\n" +
                        "}";

        result = result.Replace("\r", "").Replace("+-", "-").Replace("++", "+").Replace("+-", "-").Replace("++", "+");

        return result;
    }

    /// <summary>
    /// SELU activation function.
    /// </summary>
    /// <param name="value"></param>
    /// <returns></returns>
    private static double Af(double value) { return value > 0 ? 1.0506999492645264 * value : 1.0506999492645264 * 1.673200011253357 * (Math.Exp(value) - 1); }

    /// <summary>
    /// Generated from the trained neural network (2-[8-8-8]-1) 98.96% accurate.
    /// </summary>
    /// <param name="angleInRadians"></param>
    /// <param name="dist"></param>
    /// <returns></returns>
    public static double GetAIForce(double angleInRadians, double dist)
    {
        return Af(-0.29059420135037145 * Af(-0.5821354094649243 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) + 0.1596275685797166 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) + 0.32030724804475247 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) - 0.3324453498611215 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) - 0.1718304487966159 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) - 0.29135566325667217 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) - 1.01362559016434 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) + 0.4492261983036688 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) + 1.0480964119843816) + 0.2625790860108322 * Af(0.6068061582672001 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) - 0.2660392732581712 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) + 0.3061150505709435 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) + 0.3236690016764586 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) + 2.128772430638161 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) + 0.4456597469320867 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) + 1.9424028629299723 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) - 0.16863355486175977 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) - 0.8727665379825263) + 0.08885341112861861 * Af(0.3157996268768721 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) - 0.1905294873405594 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) + 0.33919390310569686 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) - 0.1507783756677549 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) - 0.11621788794065284 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) - 0.008250698740692017 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) - 0.7877114410667093 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) + 0.5204193279141349 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) - 0.06590678983903428) + 0.2545233585746466 * Af(0.9140683331951823 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) - 1.2988411370205113 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) - 0.17002753962991243 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) - 0.559808055695195 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) - 0.2887801725653907 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) - 0.3127960957700564 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) - 0.2602145189043447 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) + 0.6375271651445723 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) - 1.34238715005412) - 0.1637378624668264 * Af(-0.3790338184346598 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) - 0.04997171800049312 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) + 0.3613605670640175 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) - 0.23530438059016995 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) + 0.28058071136866886 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) - 1.4417330627975153 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) + 0.7066497072663553 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) + 0.7383369917884152 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) + 0.1101870548514012) + 0.39974137365559037 * Af(0.4804597972300748 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) + 0.16528862480305997 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) + 0.7921780490862187 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) + 0.45623373095833986 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) - 0.6077660333593912 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) - 0.8400350040231072 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) + 1.5018842251361495 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) - 0.4028227782462743 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) - 0.24548217484303148) - 0.7354553319231297 * Af(-1.020885837847998 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) + 1.838527571349755 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) + 1.7606327995835862 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) - 2.160916272849728 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) + 0.9318146138917502 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) - 1.2448145185937076 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) + 0.4455185328060047 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) + 0.9211162802842228 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) - 0.9054048272032115) - 0.0910816524826029 * Af(-0.5366168026644422 * Af(-1.2659157506280634 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.395489377381112 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.9349358112187607 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.19090465008133928 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.8614013323870846 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.11231262344203591 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.9100955293292933 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8296470237526528 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7210683548714841) - 0.8040616759575046 * Af(1.4557591203899942 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.73381586861227 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 1.131644476878248 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.0851332259685868 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.3709744166539466 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 1.9581075306775009 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.3314830346219862 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.1485740183363893 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 1.4664481280078627) - 0.5341678919641386 * Af(1.9460986541124632 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2946388393826047 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.2633090615929148 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.587661193534653 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) - 1.1623591690140875 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) + 2.2360820474468532 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 3.070722972526647 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.1405666497163054 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.4953033844310678) - 0.7189705289615023 * Af(-0.5580523137575975 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) + 0.05311048288531729 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.8545287421423785 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.22524057316938687 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.1863461098139103 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.877929895674095 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 1.8286469248287553 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.7857056795290378 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) + 0.4307624905756133) + 1.3119169422001176 * Af(-0.7727747706655085 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.21082985671409019 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.2755212269230687 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.1600594720440801 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 0.7434095320045869 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.336646742621462 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) - 0.0736581247051055 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 0.8797711857146276 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.2207814240891967) + 0.17910551500128488 * Af(0.284184181040779 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.2595386283498189 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) + 0.7885818612825378 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) - 0.5372323320077473 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 2.243862114828668 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.6689860758240279 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 0.5503182442551726 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) + 1.2852358888846722 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.6311926858121578) + 0.24391014875720088 * Af(-1.5496200193894496 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.3844702340584817 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 1.5106460799337833 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 4.226481974771946 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.5124648143039763 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.7318453447011164 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.1264617389879255 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 1.503948847423826 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 2.0364906978660913) + 0.23874984729205947 * Af(-3.3229768027179882 * Af(1.7445120609595095 * angleInRadians - 0.18053435926154068 * dist + 1.0690058527441373) - 0.03274577486487308 * Af(-0.22479630984636056 * angleInRadians + 0.13089021140131088 * dist + 0.29096017838802135) - 3.4653464317510516 * Af(1.3413034926190743 * angleInRadians - 0.5293303250478822 * dist + 1.30473902735835) + 0.3248402214974915 * Af(-0.7765957248805389 * angleInRadians - 1.5913324978633514 * dist - 1.5231109629045347) + 1.7555578558219398 * Af(-0.997976867439943 * angleInRadians + 0.20429968388110747 * dist - 0.9546789539934294) - 0.3388554499401313 * Af(0.4890849273016938 * angleInRadians + 0.22749847433942053 * dist - 0.11400255300681801) + 2.5109197964854477 * Af(-1.2678560209587784 * angleInRadians + 0.06608311551785022 * dist - 0.772408664930197) - 2.894252558568659 * Af(1.5648278320407247 * angleInRadians + 0.8255177318737373 * dist + 1.5469818290611859) - 0.7003674958779036) + 0.31525778778777236) + 0.02760957149274772) * 32.5 + 32.5;
    }
}